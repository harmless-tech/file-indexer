plugins {
    id "application"
    id "java"
    id "idea"

    id "com.github.spotbugs" version "5.0.13"
    id "org.beryx.jlink" version "2.26.0"
    id "com.github.gmazzo.buildconfig" version "3.1.0"
}

group "tech.harmless.fileindexer"
version "1.0.0-ALPHA"
description = "A simple file indexer in java"

sourceCompatibility = 19
targetCompatibility = 19

repositories {
    mavenCentral()
}

dependencies {
    // Annotations
    compileOnly "org.projectlombok:lombok:1.18.26"
    annotationProcessor "org.projectlombok:lombok:1.18.26"
    compileOnly "org.jetbrains:annotations:24.0.0"

    // Spotbugs
    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs.toolVersion.get()}"
    spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0"
    spotbugsPlugins "com.mebigfatguy.sb-contrib:sb-contrib:7.4.7"

    // Testing
    testImplementation "org.junit.jupiter:junit-jupiter:5.9.1"
}

buildConfig {
    className = "BuildConfig"
    packageName = group

    def commitHash = "git rev-parse --verify HEAD".execute()
    commitHash.waitFor()

    buildConfigField("String", "NAME", "\"file-indexer\"")
    buildConfigField("String", "VERSION", "\"${version}\"")
    buildConfigField("String", "DESCRIPTION", "\"${description}\"")
    buildConfigField("String", "COMMIT_HASH", "\"${commitHash.text.trim()}\"")
    buildConfig.buildConfigField("boolean", "DEBUG", "false")
}

application {
    mainModule = group as String
    mainClass = group + ".App"
    applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8", "-Xmx4G"]
}

tasks.register("debug") {
    group = "application"
    description = "Runs the program with assertions and custom debug args."
    run {
        args = ["--debug"]
    }
    doLast {
        buildConfig.buildConfigField("boolean", "DEBUG", "true")
        application.applicationDefaultJvmArgs.asList().add("-ea")
    }
    finalizedBy "run"
}

spotbugs {
    showProgress = true
}

spotbugsMain {
    reports {
        html {
            enabled = true
            stylesheet = "fancy-hist.xsl"
        }
    }
}

tasks.named("test") {
    useJUnitPlatform()
}

plugins.withType(JavaPlugin).configureEach {
    java {
        modularity.inferModulePath = true
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

jlink {
    imageZip = file("$buildDir/image-zip/file-indexer.zip")
    options = ["--strip-debug", "--compress", "2", "--no-header-files", "--no-man-pages"]
    launcher {
        name = "file-indexer"
        jvmArgs = ["-Dfile.encoding=UTF-8"]
        noConsole = false
    }
    jpackage {
        imageName = "file-indexer"
        appVersion = version.split("-")[0]
        vendor = "harmless-tech"

        installerOptions = [
                "--description", description,
                "--copyright", "2023 harmless-tech"
        ]
        installerType = findProperty("installerType") as String
        if (installerType == "msi") {
            installerOptions += [
                    "--win-per-user-install",
                    "--win-dir-chooser",
                    "--win-menu", "--win-menu-group", "Harmless-Tech",
                    "--win-shortcut"
            ]
        }
        if (installerType in ["pkg", "dmg"]) {
        }
        if (installerType in ["deb", "rpm"]) {
            installerOptions += ["--linux-shortcut"]
        }
    }
}

tasks.jlink {
    doLast {
        copy {
            from "$rootDir/LICENSE"
            into "$imageDir.asFile/legal/tech.harmless.fileindexer"
        }
        copy {
            from "$rootDir/README.md"
            into "$imageDir.asFile/"
        }
    }
}

tasks.jpackage {
    doFirst {
        getProperty("installerType")
    }
}
